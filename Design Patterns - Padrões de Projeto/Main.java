// Importa as classes necess√°rias para usar Listas (ArrayList)
import java.util.ArrayList;
import java.util.List;

// üîπ Interface Observador (contrato que define o m√©todo "atualizar")
interface Observador {
    void atualizar(String mensagem); // Todo observador DEVE ter este m√©todo
}

// üîπ Classe CanalNoticia (o "Observado" que envia notifica√ß√µes)
class CanalNoticia {
    // Lista que armazena todos os observadores inscritos
    private List<Observador> observadores = new ArrayList<>();
    private String noticia; // A not√≠cia mais recente

    // ‚úÖ Inscreve um novo observador (ex: usu√°rio que quer receber not√≠cias)
    public void adicionarObservador(Observador o) {
        observadores.add(o); // Adiciona na lista
    }

    // ‚ùå Remove um observador (ex: usu√°rio que n√£o quer mais receber not√≠cias)
    public void removerObservador(Observador o) {
        observadores.remove(o); // Tira da lista
    }

    // üì¢ Publica uma nova not√≠cia e AVISA todos os inscritos
    public void novaNoticia(String noticia) {
        this.noticia = noticia; // Guarda a not√≠cia
        notificarObservadores(); // Chama o m√©todo que avisa todo mundo
    }

    // üîî M√©todo PRIVADO que percorre a lista e avisa cada observador
    private void notificarObservadores() {
        for (Observador o : observadores) {
            o.atualizar(noticia); // Chama o m√©todo "atualizar" de cada um
        }
    }
}

// üîπ Classe Usuario (um "Observador" que recebe not√≠cias)
class Usuario implements Observador {
    private String nome; // Nome do usu√°rio

    // Construtor (cria um usu√°rio com um nome)
    public Usuario(String nome) {
        this.nome = nome;
    }

    // üì© M√©todo OBRIGAT√ìRIO (definido pela interface Observador)
    @Override
    public void atualizar(String mensagem) {
        // Imprime a not√≠cia recebida
        System.out.println(nome + " recebeu a not√≠cia: " + mensagem);
    }
}

// üîπ Classe Main (testa o c√≥digo)
public class Main {
    public static void main(String[] args) {
        System.out.println("Padr√£o Observer");

        // 1Ô∏è‚É£ Cria o canal de not√≠cias (Observado)
        CanalNoticia canal = new CanalNoticia();

        // 2Ô∏è‚É£ Cria dois usu√°rios (Observadores)
        Usuario usuario1 = new Usuario("Anderson Luiz");
        Usuario usuario2 = new Usuario("Maria das Neves");

        // 3Ô∏è‚É£ Inscreve os usu√°rios no canal
        canal.adicionarObservador(usuario1);
        canal.adicionarObservador(usuario2);

        // 4Ô∏è‚É£ Publica uma not√≠cia (automaticamente avisa os inscritos)
        canal.novaNoticia(" Caiu de paraquedas!");
    }
}